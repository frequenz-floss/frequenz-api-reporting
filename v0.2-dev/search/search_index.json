{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz Reporting API","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Frequenz gRPC API to aggregate component data from microgrids.</p>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>The following platforms are officially supported (tested):</p> <ul> <li>Python: 3.11</li> <li>Operating System: Ubuntu Linux 20.04</li> <li>Architectures: amd64, arm64</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The Microgrid Reporting API serves as an interface for obtaining detailed insights into microgrid operations and metrics. Unlike general telemetry APIs, this API specializes in generating reports based on complex, user-defined aggregations of microgrid data. It provides both historical and real-time reporting capabilities.</p>"},{"location":"#objective","title":"Objective","text":"<p>The primary objective of the Microgrid Reporting API is to furnish a robust foundation for building data-driven applications that optimize microgrid performance, enable efficient power trading strategies, and facilitate intelligent decision-making across multiple operational scenarios. By aggregating and streamlining access to key metrics and data, this API not only aids in conducting in-depth performance analysis but also supports the development of algorithms and strategies for real-time and future power trading. This dual focus ensures that the API serves as a versatile tool for both operational and financial optimization within the microgrid ecosystem.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time and Historical Reporting: Supports both real-time reporting through data    streams and historical data retrieval, offering comprehensive analytical capabilities.</li> <li>Custom Aggregation: Support for user-defined aggregation formulas for microgrid    component metrics like power, voltage, and more.</li> <li>Multiple Microgrid Support: Allows users to aggregate data from multiple microgrids    in a single request, providing a holistic view of operations.</li> </ul>"},{"location":"#scope-and-limitations","title":"Scope and Limitations","text":"<p>The Microgrid Reporting API is designed to offer extensive reporting capabilities, allowing for both simple and complex data aggregations across multiple microgrids. It provides granular insights on a per-component basis as well as an overarching view of entire microgrid operations.  The scope of the API is limited by the types of aggregation formulas it supports, potentially constraining its utility in highly specialized analytical scenarios.</p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>The Microgrid Reporting API is tailored for a broad audience, including performance analysts, trading strategists, and cloud application developers. Whether the aim is to perform in-depth performance analysis, devise trading strategies based on microgrid data, or build applications that capitalize on real-time and historical data, this API serves as a comprehensive data source. By providing an array of key metrics and aggregation features, it accommodates various use-cases and empowers users to make well-informed decisions in different operational contexts.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to know how to build this project and contribute to it, please check out the Contributing Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Frequenz Reporting API","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You need to make sure you have the <code>git submodules</code> updated:</p> <pre><code>git submodule update --init\n</code></pre>"},{"location":"CONTRIBUTING/#running-protolint","title":"Running protolint","text":"<p>To make sure some common mistakes are avoided and to ensure a consistent style it is recommended to run <code>protolint</code>. After you installed <code>protolint</code>, just run:</p> <pre><code>protolint lint proto\n</code></pre>"},{"location":"CONTRIBUTING/#python-setup","title":"Python setup","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>This will also generate the Python files from the <code>proto/</code> files and leave them in <code>py/</code>, so you can inspect them.</p> <p>Or you can install all development dependencies (<code>mypy</code>, <code>pylint</code>, <code>pytest</code>, etc.) in one go too: <pre><code>python -m pip install -e .[dev]\n</code></pre></p> <p>If you don't want to install all the dependencies, you can also use <code>nox</code> to run the tests and other checks creating its own virtual environments:</p> <pre><code>python -m pip install .[dev-noxfile]\nnox\n</code></pre> <p>You can also use <code>nox -R</code> to reuse the current testing environment to speed up test at the expense of a higher chance to end up with a dirty test environment.</p>"},{"location":"CONTRIBUTING/#upgrading-dependencies","title":"Upgrading dependencies","text":"<p>If you want to update the dependency <code>frequenz-api-common</code>, then you need to:</p> <ol> <li>Update the submodule <code>frequenz-api-common</code></li> <li>Update the version of the <code>frequenz-api-common</code> package in <code>pyproject.toml</code></li> </ol> <p>The version of <code>frequenz-api-common</code> used in both places mentioned above should be the same.</p> <p>Here is an example of upgrading the <code>frequenz-api-common</code> dependency to version <code>v0.2.0</code>: <pre><code>ver=\"0.2.0\"\ncd submodules/frequenz-api-common\ngit remote update\ngit checkout v${ver}\ncd -\n\nsed s/\"frequenz-api-common == [0-9]\\.[0-9]\\.[0-9]\"/\"frequenz-api-common == ${ver}\"/g -i pyproject.toml\n</code></pre></p>"},{"location":"CONTRIBUTING/#running-tests-checks-individually","title":"Running tests / checks individually","text":"<p>For a better development test cycle you can install the runtime and test dependencies and run <code>pytest</code> manually.</p> <pre><code>python -m pip install .[dev-pytest]  # included in .[dev] too\n# And for example\npytest tests/test_*.py\n</code></pre> <p>Or you can use <code>nox</code>:</p> <pre><code>nox -R -s pytest -- test/test_*.py\n</code></pre> <p>The same appliest to <code>pylint</code> or <code>mypy</code> for example:</p> <pre><code>nox -R -s pylint -- test/test_*.py\nnox -R -s mypy -- test/test_*.py\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, first install the dependencies (if you didn't install all <code>dev</code> dependencies):</p> <pre><code>python -m pip install -e .[dev-mkdocs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    remove template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit a pull    request if an update is needed, wait until it is merged, and update the    latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s --cleanup=whitespace -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    and upload a new package to    PyPI    automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Protobuf API Reference</li> <li>Python API Reference</li> <li>Contributing</li> </ul>"},{"location":"protobuf-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>reporting<ul> <li>v1<ul> <li>reporting.proto</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/reporting/v1/reporting.proto</p> <ul> <li>AggregationConfig</li> <li>IncludeOptions</li> <li>ListAggregatedMicrogridComponentsDataRequest</li> <li>ListAggregatedMicrogridComponentsDataRequest.AggregationListFilter</li> <li>ListAggregatedMicrogridComponentsDataResponse</li> <li>ListAggregatedMicrogridComponentsDataResponse.AggregatedResult</li> <li>ListMicrogridComponentsDataRequest</li> <li>ListMicrogridComponentsDataRequest.ListFilter</li> <li>ListMicrogridComponentsDataResponse</li> <li>ListMicrogridComponentsDataResponse.MicrogridData</li> <li>ReceiveAggregatedMicrogridComponentsDataStreamRequest</li> <li>ReceiveAggregatedMicrogridComponentsDataStreamRequest.AggregationStreamFilter</li> <li>ReceiveAggregatedMicrogridComponentsDataStreamResponse</li> <li>ReceiveMicrogridComponentsDataStreamRequest</li> <li>ReceiveMicrogridComponentsDataStreamRequest.StreamFilter</li> <li>ReceiveMicrogridComponentsDataStreamResponse</li> <li>ResamplingOptions</li> <li>SimpleAggregatedMetricSample</li> <li> <p>TimeFilter</p> </li> <li> <p>IncludeOptions.FilterOption</p> </li> <li> <p>Reporting</p> </li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#frequenzapireportingv1reportingproto","title":"frequenz/api/reporting/v1/reporting.proto","text":""},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#aggregationconfig","title":"AggregationConfig","text":"<p>Message defining the aggregation configuration for a custom formula within a specific microgrid.</p> <p>The AggregationConfig allows clients to specify how metrics should be aggregated across microgrid components. It serves as the configuration guideline for any aggregation operation.</p> <p>Example</p> <p>To calculate the total voltage across three components in series with IDs 1, 2, and 3, the     configuration could look like:     {       microgrid_id: 42,       metric: DC_VOLTAGE_V,       aggregation_formula: \"#1 + #2 + #3\"     }</p> Field Type Label Description microgrid_id uint64 ID of the microgrid for which the formula is being specified. metric frequenz.api.common.v1.metrics.Metric The metric that is to be aggregated using the specified formula. <p>!!! caution Ensure the chosen metric is supported by all relevant microgrid components. Failure to meet these conditions might results in an aggregation error. | | aggregation_formula | string |  | The formula used for aggregating the component metric for this microgrid.</p> <p>!!! info Two types of aggregation formulas are supported: 1. Aggregate functions: These are standard aggregation functions like <code>sum()</code> and <code>avg()</code>. Example: <code>sum(#1,#2)</code>, <code>avg(#3,#4)</code></p> <ol> <li>Dedicated formulas: These support basic math operators while concatenating microgrid component IDs. Example: <code>#1 &amp;#43; #2 - #3</code>, <code>(#3 * #2) /# 1</code> |</li> </ol> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#includeoptions","title":"IncludeOptions","text":"<p>Include options for filtering microgrid components data.</p> <p>Note</p> <p>Specifies which additional fields should be included in the response.</p> Field Type Label Description bounds IncludeOptions.FilterOption optional Optional bound inclusion. By default, bounds are not included in the response. states IncludeOptions.FilterOption optional Optional operational state inclusion. By default, states are not included in the response. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listaggregatedmicrogridcomponentsdatarequest","title":"ListAggregatedMicrogridComponentsDataRequest","text":"<p>Message defining the request format for fetching aggregated historical metrics for a list of microgrid components. This request allows to specify custom aggregation formulas, along with general filtering and pagination options.</p> <p>Note<p>The aggregation follows the passive sign convention. Bounds, operational state, or errors are not applicable to aggregated data.</p> </p> Field Type Label Description aggregation_configs AggregationConfig repeated List of aggregation formulas, composed of a metric and related formula. <p>!!! note Each entry in the list consists of a pairs a metric and aggregation formula. Multiple such aggregations can be specified for a list of microgrid components, allowing for different metrics and formula combinations. At least one formula must be provided for a valid request. | | filter | ListAggregatedMicrogridComponentsDataRequest.AggregationListFilter |  | General filter that applies to all formula aggregations provided. | | pagination_params | frequenz.api.common.v1.pagination.PaginationParams |  | Pagination parameters to control the amount of data returned in a single response. |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listaggregatedmicrogridcomponentsdatarequestaggregationlistfilter","title":"ListAggregatedMicrogridComponentsDataRequest.AggregationListFilter","text":"<p>General filter criteria for querying aggregated microgrid components data.</p> Field Type Label Description resampling_options ResamplingOptions Optional resampling options like resolution for the data, represented in seconds. Data will always be resampled to ensure consistency of the aggregation. If omitted, data will be resampled with a default of one second time_filter TimeFilter Optional time-based filter criteria. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listaggregatedmicrogridcomponentsdataresponse","title":"ListAggregatedMicrogridComponentsDataResponse","text":"<p>Message defining the response format for a request that fetches aggregated historical metrics based on custom aggregation formulas.</p> <p>Note</p> <p>At least one formula and metric must have been specified in the corresponding request. The aggregation results for these metrics are returned in the samples field.</p> <p>Example</p> <p>Example output structure is the following: <pre><code>results: [\n  {\n    aggregation_config: {\n      microgrid_id: 1,\n      metric: &amp;#34;DC_VOLTAGE_V&amp;#34;,\n      aggregation_formula: &amp;#34;avg(3,5,6)&amp;#34;\n    },\n    samples: [\n      { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, sample: { value: 220.1 } },\n      { sampled_at: &amp;#34;2023-10-01T00:05:00Z&amp;#34;, sample: { value: 215.2 } }\n    ]\n  },\n  {\n    aggregation_config: {\n      microgrid_id: 2,\n      metric: &amp;#34;DC_CURRENT_A&amp;#34;,\n      aggregation_formula: &amp;#34;sum(1,2,3,4)&amp;#34;\n    },\n    samples: [\n      { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, sample: { value: 1310.7 } },\n      { sampled_at: &amp;#34;2023-10-01T00:05:00Z&amp;#34;, sample: { value: 1422.2 } }\n    ]\n  }\n]\n</code></pre></p> Field Type Label Description results ListAggregatedMicrogridComponentsDataResponse.AggregatedResult repeated List of aggregated results, each corresponding to a metric and custom aggregation formula. <p>!!! note Each entry in this list contains the aggregation formula config and the corresponding aggregated metric samples for the requested timeframe. | | pagination_info | frequenz.api.common.v1.pagination.PaginationInfo |  | Metadata for pagination, containing the token for the next page of results.</p> <p>!!! note If <code>pagination_info</code> is populated, it implies that more data is available to fetch. |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listaggregatedmicrogridcomponentsdataresponseaggregatedresult","title":"ListAggregatedMicrogridComponentsDataResponse.AggregatedResult","text":"<p>Encapsulates the result of aggregating a metric.</p> Field Type Label Description aggregation_config AggregationConfig Metric and related formula provided for aggregation. samples SimpleAggregatedMetricSample repeated A list of aggregated metrics. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listmicrogridcomponentsdatarequest","title":"ListMicrogridComponentsDataRequest","text":"<p>Message defining the request format for fetching historical metrics, such as electrical measurements, and other information for individual microgrid components.</p> <p>Note</p> <p>In addition to the raw metrics, the API can also return additional information like errors or operational states of the components during the specified time period.</p> Field Type Label Description microgrid_components frequenz.api.common.v1.microgrid.MicrogridComponentIDs repeated Encapsulates the microgrid ID and the component IDs within that microgrid for which the historical data should be retrieved. <p>!!! note Each entry in this repeated field associates a microgrid ID with its respective component IDs. At least one such association must be provided for a valid request. | | metrics | frequenz.api.common.v1.metrics.Metric | repeated | List of metrics to return. Only the specified metrics will be returned.</p> <p>!!! note At least one metric must be specified. Failure to do so will result in an empty response. | | filter | ListMicrogridComponentsDataRequest.ListFilter |  | General filter criteria apply to the data retrieval for all specified microgrid components.</p> <p>!!! note The filter can specify a start time and end time, and/or resampling options. It can also specify bounds, operational state, or errors to be returned. | | pagination_params | frequenz.api.common.v1.pagination.PaginationParams |  | Pagination parameters to control the amount of data returned in a single response. |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listmicrogridcomponentsdatarequestlistfilter","title":"ListMicrogridComponentsDataRequest.ListFilter","text":"<p>General filter criteria for querying microgrid components data.</p> Field Type Label Description resampling_options ResamplingOptions Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation. time_filter TimeFilter Optional time-based filter criteria. include_options IncludeOptions Include options specifying additional fields to be included in the response. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listmicrogridcomponentsdataresponse","title":"ListMicrogridComponentsDataResponse","text":"<p>Response containing historical microgrid component metrics in one or multiple microgrids</p> <p>Each microgrid's components are provided as timeseries data structures that encapsulate metrics, bounds, errors and operational state and their associated timestamps for each component within the specified time range.</p> <p>Example</p> <p>Example output structure: <pre><code>microgrids: [\n  {\n    microgrid_id: 1,\n    components: [\n      {\n        component_id: 13,\n        metric_samples: [\n          /* list of metrics for multiple timestamps */\n          { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_VOLTAGE_V&amp;#34;, sample: {...}, bounds: {...} },\n          { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_CURRENT_A&amp;#34;, sample: {...}, bounds: {...} }\n          { sampled_at: &amp;#34;2023-10-01T00:05:00Z&amp;#34;, metric: &amp;#34;DC_VOLTAGE_V&amp;#34;, sample: {...}, bounds: {...} },\n          { sampled_at: &amp;#34;2023-10-01T00:05:00Z&amp;#34;, metric: &amp;#34;DC_CURRENT_A&amp;#34;, sample: {...}, bounds: {...} }\n        ],\n        states: [\n          /* list of states for multiple timestamps */\n          { sampled_at: &amp;#34;2023-10-01T00:00:13.12Z&amp;#34;, states: [...], errors: [...], warnings: [...] },\n          { sampled_at: &amp;#34;2023-10-01T00:02:22.01Z&amp;#34;, states: [...], errors: [...], warnings: [...] },\n          { sampled_at: &amp;#34;2023-10-01T00:05:02.32Z&amp;#34;, states: [...], errors: [...], warnings: [...] },\n        ]\n      },\n      {\n        component_id: 243,\n        metric_samples: [ ... ],\n        states: [ ... ]\n      },\n    ]\n  },\n  {\n    microgrid_id: 2,\n    components: [ ... ]\n  }\n]\n</code></pre></p> Field Type Label Description microgrids ListMicrogridComponentsDataResponse.MicrogridData repeated List of microgrids metrics timeseries data, organized per component. pagination_info frequenz.api.common.v1.pagination.PaginationInfo Metadata for pagination, including token for the next page to retrieve. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#listmicrogridcomponentsdataresponsemicrogriddata","title":"ListMicrogridComponentsDataResponse.MicrogridData","text":"<p>Contains the metric samples for a single microgrid organized by components.</p> Field Type Label Description microgrid_id uint64 Unique microgrid identifier. components frequenz.api.common.v1.microgrid.components.ComponentData repeated A list of components with related metric timeseries data samples. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receiveaggregatedmicrogridcomponentsdatastreamrequest","title":"ReceiveAggregatedMicrogridComponentsDataStreamRequest","text":"<p>Message defining the request format for streaming aggregated historical metrics. This request allows to specify custom aggregation formulas, along with general filtering.</p> <p>At least one aggregation formula config must be provided. The aggregation follows the passive sign convention.</p> Field Type Label Description aggregation_configs AggregationConfig repeated List of pairs of metric and corresponding aggregation formula. filter ReceiveAggregatedMicrogridComponentsDataStreamRequest.AggregationStreamFilter General streaming filter that applies to all formula aggregations. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receiveaggregatedmicrogridcomponentsdatastreamrequestaggregationstreamfilter","title":"ReceiveAggregatedMicrogridComponentsDataStreamRequest.AggregationStreamFilter","text":"<p>General filter criteria for querying microgrid components data.</p> Field Type Label Description resampling_options ResamplingOptions Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receiveaggregatedmicrogridcomponentsdatastreamresponse","title":"ReceiveAggregatedMicrogridComponentsDataStreamResponse","text":"<p>Message defining the response format for a stream that fetches aggregated real-time metrics for the provided custom aggregation formulas.</p> <p>Note</p> <p>The formula and metric must have been specified in the corresponding request. A single aggregated sample for the metric is returned in the sample field. Each message covers a single formula. For multiple formulars provided in the request, expect sequential messages in the stream.</p> <p>Example</p> <p>Given a stream output, a single sample might be: <pre><code>{\n  aggregation_config: {\n    microgrid_id: 1,\n    metric: &amp;#34;DC_VOLTAGE_V&amp;#34;,\n    aggregation_formula: &amp;#34;avg(1,2,3)&amp;#34;\n  },\n  sample {\n    sampled_at: &amp;#39;2023-10-01T00:00:00Z&amp;#39;,\n    sample: { value: 42.5 }\n  }\n}\n</code></pre></p> Field Type Label Description aggregation_config AggregationConfig The metric and formula that has been used to aggregate the sample. sample SimpleAggregatedMetricSample Aggregated sample value and corresponding UTC timestamp when it was sampled. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receivemicrogridcomponentsdatastreamrequest","title":"ReceiveMicrogridComponentsDataStreamRequest","text":"<p>Request message for receiving stream of metrics, such as electrical measurements, and other information for individual microgrid components.</p> <p>Note</p> <p>In addition to the raw metrics, the API can also return additional information like errors or operational states of the components during the specified time period.</p> Field Type Label Description microgrid_components frequenz.api.common.v1.microgrid.MicrogridComponentIDs repeated Encapsulates the microgrid ID and the component IDs within that microgrid for which the historical data should be retrieved. <p>!!! note Each entry in this repeated field associates a microgrid ID with its respective component IDs. At least one such association must be provided for a valid request. | | metrics | frequenz.api.common.v1.metrics.Metric | repeated | List of metrics to return. Only the specified metrics will be returned.</p> <p>!!! note At least one metric must be specified. Failure to do so will result in an empty response. | | filter | ReceiveMicrogridComponentsDataStreamRequest.StreamFilter |  | General filter that applies to the data retrieval for all specified microgrids and components.</p> <p>!!! note The filter can specify a list of metrics to be return but also specify bounds, operational state, or errors to be returned. |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receivemicrogridcomponentsdatastreamrequeststreamfilter","title":"ReceiveMicrogridComponentsDataStreamRequest.StreamFilter","text":"<p>General filter criteria for querying microgrid components data.</p> <p>Note</p> <p>The filter criteria defined here are applied universally across all specified microgrids and their respective components.</p> Field Type Label Description resampling_options ResamplingOptions Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation. include_options IncludeOptions Include options specifying additional fields to be included in the response. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#receivemicrogridcomponentsdatastreamresponse","title":"ReceiveMicrogridComponentsDataStreamResponse","text":"<p>Response containing a single data sample for one microgrid's components.</p> <p>Note</p> <p>The microgrid's components are provided as single data samples that encapsulate metrics, bounds, errors, and operational states along with their associated timestamps. Each response message covers a single microgrid. If multiple microgrids are provided in the request, expect sequential messages in the stream.</p> <p>Example</p> <p>Example output structure: <pre><code>{\n  microgrid_id: 1,\n  components: [\n    {\n      component_id: 13,\n      metric_samples: [\n        /* all metrics belong to the same timestamp */\n        /* sample is type MetricSampleVariant */\n        { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_VOLTAGE_V&amp;#34;, sample: {...}, bounds: {...} },\n        { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_CURRENT_A&amp;#34;, sample: {...}, bounds: {...} }\n      ],\n      state: {\n        sampled_at: &amp;#34;2023-10-01T00:00:13.12Z&amp;#34;,\n        states: [&amp;#34;COMPONENT_STATE_CHARGING&amp;#34;, &amp;#34;CABLE_CONNECTED&amp;#34;],\n        warnings: []\n        errors: [],\n      ]\n    },\n    {\n      component_id: 59,\n      metric_samples: [\n        /* all metrics belong to the same timestamp */\n        /* sample is type MetricSampleVariant */\n        { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_VOLTAGE_V&amp;#34;, sample: {...}, bounds: {...} },\n        { sampled_at: &amp;#34;2023-10-01T00:00:00Z&amp;#34;, metric: &amp;#34;DC_CURRENT_A&amp;#34;, sample: {...}, bounds: {...} }\n      ],\n      state: {\n        sampled_at: &amp;#34;2023-10-01T00:00:13.12Z&amp;#34;,\n        states: [&amp;#34;COMPONENT_STATE_ERROR&amp;#34;],\n        warnings: []\n        errors: [&amp;#34;COMPONENT_ERROR_CODE_BATTERY_RELAY_ERROR&amp;#34;],\n      ]\n    }\n  ]\n}\n</code></pre></p> Field Type Label Description microgrid_id uint64 Microgrid ID for which the components and samples are reported. components frequenz.api.common.v1.microgrid.components.ComponentData repeated List of components within this microgrid, each with its associated data samples. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#resamplingoptions","title":"ResamplingOptions","text":"<p>Resampling options for aggregated microgrid components data. If data is resampled, all samples that fall in a left-closed time interval determined by the resolution will be aggregated. At the moment only mean aggregation is supported. The timestamp of the aggregated sample corresponds to the oldest possible timestamp of the time interval.</p> Field Type Label Description resolution uint32 optional Optional resampling resolution for the data, represented in seconds. If omitted, data will be returned in its original resolution. <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#simpleaggregatedmetricsample","title":"SimpleAggregatedMetricSample","text":"<p>Defines a single aggregated metric sample, which represents a consolidated metric value over a collection of microgrid components within a specific timeframe.</p> <p>This message serves to encapsulate aggregate metrics derived from multiple component measurements. It is particularly useful in scenarios where an overall metric needs to be calculated for a set of components. For instance, you could use it to represent the average voltage across multiple sources within a microgrid or to calculate the average state of charge of several batteries.</p> Field Type Label Description sampled_at google.protobuf.Timestamp The UTC sample timestamp for the aggregated metrics. <p>!!! info This is the original timestamp of the samples that were aggregated. | | sample | frequenz.api.common.v1.metrics.SimpleMetricSample |  | The aggregated value of the metric. float value = 2; |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#timefilter","title":"TimeFilter","text":"<p>Time-based filter for querying aggregated microgrid components data.</p> <p>Note</p> <p>Specifies the start and end time for the query. Both fields are optional, but their absence or presence has specific implications for the query results. Data will be returned as a set of rows, which each row containing a timestamp. This timestamp will be &gt;= start and &lt; end.</p> Field Type Label Description start google.protobuf.Timestamp Optional UTC start time for the query. <p>!!! info If not provided, the query defaults to the earliest available data for the specified microgrid components. | | end | google.protobuf.Timestamp |  | Optional UTC end time for the query.</p> <p>!!! info If not provided, the query defaults to the most recent available data for the specified microgrid components. |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#includeoptionsfilteroption","title":"IncludeOptions.FilterOption","text":"<p>Defines whether to include results in the response message.</p> Name Number Description FILTER_OPTION_UNSPECIFIED 0 FILTER_OPTION_EXCLUDE 1 FILTER_OPTION_INCLUDE 2 <p></p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#reporting","title":"Reporting","text":"<p>The Reporting service provides services for real-time and historical metrics monitoring of various microgrid components like Batteries, EV Chargers, and Inverters.</p> <p>Utilize these APIs for tasks ranging from real-time metric streaming to complex, formula-driven historical data aggregation. For detailed information on component categories and the metrics they provide, please consult the referenced component categories imported above.</p> Method Name Request Type Response Type Description ListMicrogridComponentsData ListMicrogridComponentsDataRequest ListMicrogridComponentsDataResponse Fetches historical metrics for a list of microgrid components. <p>!!! note This RPC endpoint retrieves historical metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result. | | ReceiveMicrogridComponentsDataStream | ReceiveMicrogridComponentsDataStreamRequest | ReceiveMicrogridComponentsDataStreamResponse stream | Streams metrics for a list of microgrid components.</p> <p>!!! note This RPC endpoint streams metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result. | | ListAggregatedMicrogridComponentsData | ListAggregatedMicrogridComponentsDataRequest | ListAggregatedMicrogridComponentsDataResponse | Fetches aggregated historical metrics based on user-defined formulas for a list of microgrid components.</p> <p>!!! note This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula must be provided for a valid query. Formulas are provided on a per-microgrid basis. | | ReceiveAggregatedMicrogridComponentsDataStream | ReceiveAggregatedMicrogridComponentsDataStreamRequest | ReceiveAggregatedMicrogridComponentsDataStreamResponse stream | Streams aggregated metrics based on user-defined formulas for a list of microgrid components.</p> <p>!!! note This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula for one microgrid must be provided for a valid result. |</p>"},{"location":"protobuf-reference/frequenz/api/reporting/v1/reporting/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"python-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>reporting<ul> <li>conftest</li> <li>v1<ul> <li>reporting_pb2</li> <li>reporting_pb2_grpc</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"python-reference/frequenz/api/reporting/","title":"Index","text":""},{"location":"python-reference/frequenz/api/reporting/#frequenz.api.reporting","title":"frequenz.api.reporting","text":"<p>Frequenz gRPC API to aggregate component data from microgrids.</p>"},{"location":"python-reference/frequenz/api/reporting/conftest/","title":"conftest","text":""},{"location":"python-reference/frequenz/api/reporting/conftest/#frequenz.api.reporting.conftest","title":"frequenz.api.reporting.conftest","text":"<p>Validate docstring code examples.</p> <p>Code examples are often wrapped in triple backticks (```) within docstrings. This plugin extracts these code examples and validates them using pylint.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/","title":"Index","text":""},{"location":"python-reference/frequenz/api/reporting/v1/#frequenz.api.reporting.v1","title":"frequenz.api.reporting.v1","text":"<p>Frequenz gRPC API to aggregate component data from microgrids.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/","title":"reporting_pb2","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2","title":"frequenz.api.reporting.v1.reporting_pb2","text":"<p>Generated protocol buffer code.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.AggregationConfig","title":"frequenz.api.reporting.v1.reporting_pb2.AggregationConfig","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the aggregation configuration for a custom formula within a specific microgrid.</p> <p>The AggregationConfig allows clients to specify how metrics should be aggregated across microgrid components. It serves as the configuration guideline for any aggregation operation.</p> <p>Example</p> <p>To calculate the total voltage across three components in series with IDs 1, 2, and 3, the     configuration could look like:     {       microgrid_id: 42,       metric: DC_VOLTAGE_V,       aggregation_formula: \"#1 + #2 + #3\"     }</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.AggregationConfig-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.AggregationConfig.aggregation_formula","title":"aggregation_formula  <code>instance-attribute</code>","text":"<pre><code>aggregation_formula: str\n</code></pre> <p>The formula used for aggregating the component metric for this microgrid.</p> <p>Info</p> <p>Two types of aggregation formulas are supported: 1. Aggregate functions: These are standard aggregation functions like <code>sum()</code> and <code>avg()</code>.    Example: <code>sum(#1,#2)</code>, <code>avg(#3,#4)</code></p> <ol> <li>Dedicated formulas: These support basic math operators while concatenating microgrid    component IDs.    Example: <code>#1 + #2 - #3</code>, <code>(#3 * #2) /# 1</code></li> </ol>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.AggregationConfig.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: ValueType\n</code></pre> <p>The metric that is to be aggregated using the specified formula.</p> <p>Caution</p> <p>Ensure the chosen metric is supported by all relevant microgrid components. Failure to meet these conditions might results in an aggregation error.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.AggregationConfig.microgrid_id","title":"microgrid_id  <code>instance-attribute</code>","text":"<pre><code>microgrid_id: int\n</code></pre> <p>ID of the microgrid for which the formula is being specified.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions","title":"frequenz.api.reporting.v1.reporting_pb2.IncludeOptions","text":"<p>             Bases: <code>Message</code></p> <p>Include options for filtering microgrid components data.</p> <p>Note</p> <p>Specifies which additional fields should be included in the response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions.bounds","title":"bounds  <code>instance-attribute</code>","text":"<pre><code>bounds: ValueType\n</code></pre> <p>Optional bound inclusion. By default, bounds are not included in the response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions.states","title":"states  <code>instance-attribute</code>","text":"<pre><code>states: ValueType\n</code></pre> <p>Optional operational state inclusion. By default, states are not included in the response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.IncludeOptions.FilterOption","title":"FilterOption","text":"<p>             Bases: <code>_FilterOption</code></p> <p>Defines whether to include results in the response message.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest","title":"frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the request format for fetching aggregated historical metrics for a list of microgrid components. This request allows to specify custom aggregation formulas, along with general filtering and pagination options.</p> <p>Note<p>The aggregation follows the passive sign convention. Bounds, operational state, or errors are not applicable to aggregated data.</p> </p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest.aggregation_configs","title":"aggregation_configs  <code>property</code>","text":"<pre><code>aggregation_configs: RepeatedCompositeFieldContainer[\nglobal___AggregationConfig\n]\n</code></pre> <p>List of aggregation formulas, composed of a metric and related formula.</p> <p>Note</p> <p>Each entry in the list consists of a pairs a metric and aggregation formula. Multiple such aggregations can be specified for a list of microgrid components, allowing for different metrics and formula combinations. At least one formula must be provided for a valid request.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest.filter","title":"filter  <code>property</code>","text":"<pre><code>filter: AggregationListFilter\n</code></pre> <p>General filter that applies to all formula aggregations provided.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest.pagination_params","title":"pagination_params  <code>property</code>","text":"<pre><code>pagination_params: PaginationParams\n</code></pre> <p>Pagination parameters to control the amount of data returned in a single response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataRequest.AggregationListFilter","title":"AggregationListFilter","text":"<p>             Bases: <code>Message</code></p> <p>General filter criteria for querying aggregated microgrid components data.</p> Attributes\u00a4 resampling_options <code>property</code> \u00a4 <pre><code>resampling_options: global___ResamplingOptions\n</code></pre> <p>Optional resampling options like resolution for the data, represented in seconds. Data will always be resampled to ensure consistency of the aggregation. If omitted, data will be resampled with a default of one second</p> time_filter <code>property</code> \u00a4 <pre><code>time_filter: global___TimeFilter\n</code></pre> <p>Optional time-based filter criteria.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse","title":"frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the response format for a request that fetches aggregated historical metrics based on custom aggregation formulas.</p> <p>Note</p> <p>At least one formula and metric must have been specified in the corresponding request. The aggregation results for these metrics are returned in the samples field.</p> <p>Example</p> <p>Example output structure is the following: <pre><code>results: [\n  {\n    aggregation_config: {\n      microgrid_id: 1,\n      metric: \"DC_VOLTAGE_V\",\n      aggregation_formula: \"avg(3,5,6)\"\n    },\n    samples: [\n      { sampled_at: \"2023-10-01T00:00:00Z\", sample: { value: 220.1 } },\n      { sampled_at: \"2023-10-01T00:05:00Z\", sample: { value: 215.2 } }\n    ]\n  },\n  {\n    aggregation_config: {\n      microgrid_id: 2,\n      metric: \"DC_CURRENT_A\",\n      aggregation_formula: \"sum(1,2,3,4)\"\n    },\n    samples: [\n      { sampled_at: \"2023-10-01T00:00:00Z\", sample: { value: 1310.7 } },\n      { sampled_at: \"2023-10-01T00:05:00Z\", sample: { value: 1422.2 } }\n    ]\n  }\n]\n</code></pre></p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse.pagination_info","title":"pagination_info  <code>property</code>","text":"<pre><code>pagination_info: PaginationInfo\n</code></pre> <p>Metadata for pagination, containing the token for the next page of results.</p> <p>Note</p> <p>If <code>pagination_info</code> is populated, it implies that more data is available to fetch.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse.results","title":"results  <code>property</code>","text":"<pre><code>results: RepeatedCompositeFieldContainer[AggregatedResult]\n</code></pre> <p>List of aggregated results, each corresponding to a metric and custom aggregation formula.</p> <p>Note</p> <p>Each entry in this list contains the aggregation formula config and the corresponding aggregated metric samples for the requested timeframe.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListAggregatedMicrogridComponentsDataResponse.AggregatedResult","title":"AggregatedResult","text":"<p>             Bases: <code>Message</code></p> <p>Encapsulates the result of aggregating a metric.</p> Attributes\u00a4 aggregation_config <code>property</code> \u00a4 <pre><code>aggregation_config: global___AggregationConfig\n</code></pre> <p>Metric and related formula provided for aggregation.</p> samples <code>property</code> \u00a4 <pre><code>samples: RepeatedCompositeFieldContainer[\nglobal___SimpleAggregatedMetricSample\n]\n</code></pre> <p>A list of aggregated metrics.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest","title":"frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the request format for fetching historical metrics, such as electrical measurements, and other information for individual microgrid components.</p> <p>Note</p> <p>In addition to the raw metrics, the API can also return additional information like errors or operational states of the components during the specified time period.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest.filter","title":"filter  <code>property</code>","text":"<pre><code>filter: ListFilter\n</code></pre> <p>General filter criteria apply to the data retrieval for all specified microgrid components.</p> <p>Note</p> <p>The filter can specify a start time and end time, and/or resampling options. It can also specify bounds, operational state, or errors to be returned.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest.metrics","title":"metrics  <code>property</code>","text":"<pre><code>metrics: RepeatedScalarFieldContainer[ValueType]\n</code></pre> <p>List of metrics to return. Only the specified metrics will be returned.</p> <p>Note</p> <p>At least one metric must be specified. Failure to do so will result in an empty response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest.microgrid_components","title":"microgrid_components  <code>property</code>","text":"<pre><code>microgrid_components: RepeatedCompositeFieldContainer[\nMicrogridComponentIDs\n]\n</code></pre> <p>Encapsulates the microgrid ID and the component IDs within that microgrid for which the historical data should be retrieved.</p> <p>Note</p> <p>Each entry in this repeated field associates a microgrid ID with its respective component IDs. At least one such association must be provided for a valid request.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest.pagination_params","title":"pagination_params  <code>property</code>","text":"<pre><code>pagination_params: PaginationParams\n</code></pre> <p>Pagination parameters to control the amount of data returned in a single response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataRequest.ListFilter","title":"ListFilter","text":"<p>             Bases: <code>Message</code></p> <p>General filter criteria for querying microgrid components data.</p> Attributes\u00a4 include_options <code>property</code> \u00a4 <pre><code>include_options: global___IncludeOptions\n</code></pre> <p>Include options specifying additional fields to be included in the response.</p> resampling_options <code>property</code> \u00a4 <pre><code>resampling_options: global___ResamplingOptions\n</code></pre> <p>Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation.</p> time_filter <code>property</code> \u00a4 <pre><code>time_filter: global___TimeFilter\n</code></pre> <p>Optional time-based filter criteria.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse","title":"frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse","text":"<p>             Bases: <code>Message</code></p> <p>Response containing historical microgrid component metrics in one or multiple microgrids</p> <p>Each microgrid's components are provided as timeseries data structures that encapsulate metrics, bounds, errors and operational state and their associated timestamps for each component within the specified time range.</p> <p>Example</p> <p>Example output structure: <pre><code>microgrids: [\n  {\n    microgrid_id: 1,\n    components: [\n      {\n        component_id: 13,\n        metric_samples: [\n          /* list of metrics for multiple timestamps */\n          { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_VOLTAGE_V\", sample: {...}, bounds: {...} },\n          { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_CURRENT_A\", sample: {...}, bounds: {...} }\n          { sampled_at: \"2023-10-01T00:05:00Z\", metric: \"DC_VOLTAGE_V\", sample: {...}, bounds: {...} },\n          { sampled_at: \"2023-10-01T00:05:00Z\", metric: \"DC_CURRENT_A\", sample: {...}, bounds: {...} }\n        ],\n        states: [\n          /* list of states for multiple timestamps */\n          { sampled_at: \"2023-10-01T00:00:13.12Z\", states: [...], errors: [...], warnings: [...] },\n          { sampled_at: \"2023-10-01T00:02:22.01Z\", states: [...], errors: [...], warnings: [...] },\n          { sampled_at: \"2023-10-01T00:05:02.32Z\", states: [...], errors: [...], warnings: [...] },\n        ]\n      },\n      {\n        component_id: 243,\n        metric_samples: [ ... ],\n        states: [ ... ]\n      },\n    ]\n  },\n  {\n    microgrid_id: 2,\n    components: [ ... ]\n  }\n]\n</code></pre></p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse.microgrids","title":"microgrids  <code>property</code>","text":"<pre><code>microgrids: RepeatedCompositeFieldContainer[MicrogridData]\n</code></pre> <p>List of microgrids metrics timeseries data, organized per component.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse.pagination_info","title":"pagination_info  <code>property</code>","text":"<pre><code>pagination_info: PaginationInfo\n</code></pre> <p>Metadata for pagination, including token for the next page to retrieve.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ListMicrogridComponentsDataResponse.MicrogridData","title":"MicrogridData","text":"<p>             Bases: <code>Message</code></p> <p>Contains the metric samples for a single microgrid organized by components.</p> Attributes\u00a4 components <code>property</code> \u00a4 <pre><code>components: RepeatedCompositeFieldContainer[ComponentData]\n</code></pre> <p>A list of components with related metric timeseries data samples.</p> microgrid_id <code>instance-attribute</code> \u00a4 <pre><code>microgrid_id: int\n</code></pre> <p>Unique microgrid identifier.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest","title":"frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the request format for streaming aggregated historical metrics. This request allows to specify custom aggregation formulas, along with general filtering.</p> <p>At least one aggregation formula config must be provided. The aggregation follows the passive sign convention.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.aggregation_configs","title":"aggregation_configs  <code>property</code>","text":"<pre><code>aggregation_configs: RepeatedCompositeFieldContainer[\nglobal___AggregationConfig\n]\n</code></pre> <p>List of pairs of metric and corresponding aggregation formula.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.filter","title":"filter  <code>property</code>","text":"<pre><code>filter: AggregationStreamFilter\n</code></pre> <p>General streaming filter that applies to all formula aggregations.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.AggregationStreamFilter","title":"AggregationStreamFilter","text":"<p>             Bases: <code>Message</code></p> <p>General filter criteria for querying microgrid components data.</p> Attributes\u00a4 resampling_options <code>property</code> \u00a4 <pre><code>resampling_options: global___ResamplingOptions\n</code></pre> <p>Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse","title":"frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse","text":"<p>             Bases: <code>Message</code></p> <p>Message defining the response format for a stream that fetches aggregated real-time metrics for the provided custom aggregation formulas.</p> <p>Note</p> <p>The formula and metric must have been specified in the corresponding request. A single aggregated sample for the metric is returned in the sample field. Each message covers a single formula. For multiple formulars provided in the request, expect sequential messages in the stream.</p> <p>Example</p> <p>Given a stream output, a single sample might be: <pre><code>{\n  aggregation_config: {\n    microgrid_id: 1,\n    metric: \"DC_VOLTAGE_V\",\n    aggregation_formula: \"avg(1,2,3)\"\n  },\n  sample {\n    sampled_at: '2023-10-01T00:00:00Z',\n    sample: { value: 42.5 }\n  }\n}\n</code></pre></p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.aggregation_config","title":"aggregation_config  <code>property</code>","text":"<pre><code>aggregation_config: global___AggregationConfig\n</code></pre> <p>The metric and formula that has been used to aggregate the sample.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.sample","title":"sample  <code>property</code>","text":"<pre><code>sample: global___SimpleAggregatedMetricSample\n</code></pre> <p>Aggregated sample value and corresponding UTC timestamp when it was sampled.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest","title":"frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest","text":"<p>             Bases: <code>Message</code></p> <p>Request message for receiving stream of metrics, such as electrical measurements, and other information for individual microgrid components.</p> <p>Note</p> <p>In addition to the raw metrics, the API can also return additional information like errors or operational states of the components during the specified time period.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest.filter","title":"filter  <code>property</code>","text":"<pre><code>filter: StreamFilter\n</code></pre> <p>General filter that applies to the data retrieval for all specified microgrids and components.</p> <p>Note</p> <p>The filter can specify a list of metrics to be return but also specify bounds, operational state, or errors to be returned.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest.metrics","title":"metrics  <code>property</code>","text":"<pre><code>metrics: RepeatedScalarFieldContainer[ValueType]\n</code></pre> <p>List of metrics to return. Only the specified metrics will be returned.</p> <p>Note</p> <p>At least one metric must be specified. Failure to do so will result in an empty response.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest.microgrid_components","title":"microgrid_components  <code>property</code>","text":"<pre><code>microgrid_components: RepeatedCompositeFieldContainer[\nMicrogridComponentIDs\n]\n</code></pre> <p>Encapsulates the microgrid ID and the component IDs within that microgrid for which the historical data should be retrieved.</p> <p>Note</p> <p>Each entry in this repeated field associates a microgrid ID with its respective component IDs. At least one such association must be provided for a valid request.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest.StreamFilter","title":"StreamFilter","text":"<p>             Bases: <code>Message</code></p> <p>General filter criteria for querying microgrid components data.</p> <p>Note</p> <p>The filter criteria defined here are applied universally across all specified microgrids and their respective components.</p> Attributes\u00a4 include_options <code>property</code> \u00a4 <pre><code>include_options: global___IncludeOptions\n</code></pre> <p>Include options specifying additional fields to be included in the response.</p> resampling_options <code>property</code> \u00a4 <pre><code>resampling_options: global___ResamplingOptions\n</code></pre> <p>Optional resampling options like resolution for the data, represented in seconds. If omitted, data will be returned in its original representation.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse","title":"frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse","text":"<p>             Bases: <code>Message</code></p> <p>Response containing a single data sample for one microgrid's components.</p> <p>Note</p> <p>The microgrid's components are provided as single data samples that encapsulate metrics, bounds, errors, and operational states along with their associated timestamps. Each response message covers a single microgrid. If multiple microgrids are provided in the request, expect sequential messages in the stream.</p> <p>Example</p> <p>Example output structure: <pre><code>{\n  microgrid_id: 1,\n  components: [\n    {\n      component_id: 13,\n      metric_samples: [\n        /* all metrics belong to the same timestamp */\n        /* sample is type MetricSampleVariant */\n        { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_VOLTAGE_V\", sample: {...}, bounds: {...} },\n        { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_CURRENT_A\", sample: {...}, bounds: {...} }\n      ],\n      state: {\n        sampled_at: \"2023-10-01T00:00:13.12Z\",\n        states: [\"COMPONENT_STATE_CHARGING\", \"CABLE_CONNECTED\"],\n        warnings: []\n        errors: [],\n      ]\n    },\n    {\n      component_id: 59,\n      metric_samples: [\n        /* all metrics belong to the same timestamp */\n        /* sample is type MetricSampleVariant */\n        { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_VOLTAGE_V\", sample: {...}, bounds: {...} },\n        { sampled_at: \"2023-10-01T00:00:00Z\", metric: \"DC_CURRENT_A\", sample: {...}, bounds: {...} }\n      ],\n      state: {\n        sampled_at: \"2023-10-01T00:00:13.12Z\",\n        states: [\"COMPONENT_STATE_ERROR\"],\n        warnings: []\n        errors: [\"COMPONENT_ERROR_CODE_BATTERY_RELAY_ERROR\"],\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse.components","title":"components  <code>property</code>","text":"<pre><code>components: RepeatedCompositeFieldContainer[ComponentData]\n</code></pre> <p>List of components within this microgrid, each with its associated data samples.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse.microgrid_id","title":"microgrid_id  <code>instance-attribute</code>","text":"<pre><code>microgrid_id: int\n</code></pre> <p>Microgrid ID for which the components and samples are reported.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ResamplingOptions","title":"frequenz.api.reporting.v1.reporting_pb2.ResamplingOptions","text":"<p>             Bases: <code>Message</code></p> <p>Resampling options for aggregated microgrid components data. If data is resampled, all samples that fall in a left-closed time interval determined by the resolution will be aggregated. At the moment only mean aggregation is supported. The timestamp of the aggregated sample corresponds to the oldest possible timestamp of the time interval.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ResamplingOptions-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.ResamplingOptions.resolution","title":"resolution  <code>instance-attribute</code>","text":"<pre><code>resolution: int\n</code></pre> <p>Optional resampling resolution for the data, represented in seconds. If omitted, data will be returned in its original resolution.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.SimpleAggregatedMetricSample","title":"frequenz.api.reporting.v1.reporting_pb2.SimpleAggregatedMetricSample","text":"<p>             Bases: <code>Message</code></p> <p>Defines a single aggregated metric sample, which represents a consolidated metric value over a collection of microgrid components within a specific timeframe.</p> <p>This message serves to encapsulate aggregate metrics derived from multiple component measurements. It is particularly useful in scenarios where an overall metric needs to be calculated for a set of components. For instance, you could use it to represent the average voltage across multiple sources within a microgrid or to calculate the average state of charge of several batteries.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.SimpleAggregatedMetricSample-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.SimpleAggregatedMetricSample.sample","title":"sample  <code>property</code>","text":"<pre><code>sample: SimpleMetricSample\n</code></pre> <p>The aggregated value of the metric. float value = 2;</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.SimpleAggregatedMetricSample.sampled_at","title":"sampled_at  <code>property</code>","text":"<pre><code>sampled_at: Timestamp\n</code></pre> <p>The UTC sample timestamp for the aggregated metrics.</p> <p>Info</p> <p>This is the original timestamp of the samples that were aggregated.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.TimeFilter","title":"frequenz.api.reporting.v1.reporting_pb2.TimeFilter","text":"<p>             Bases: <code>Message</code></p> <p>Time-based filter for querying aggregated microgrid components data.</p> <p>Note</p> <p>Specifies the start and end time for the query. Both fields are optional, but their absence or presence has specific implications for the query results. Data will be returned as a set of rows, which each row containing a timestamp. This timestamp will be &gt;= start and &lt; end.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2.py</code> <pre><code>  _globals['_INCLUDEOPTIONS']._serialized_start=545\n_globals['_INCLUDEOPTIONS']._serialized_end=838\n_globals['_INCLUDEOPTIONS_FILTEROPTION']._serialized_start=717\n_globals['_INCLUDEOPTIONS_FILTEROPTION']._serialized_end=816\n_globals['_AGGREGATIONCONFIG']._serialized_start=840\n_globals['_AGGREGATIONCONFIG']._serialized_end=966\n_globals['_SIMPLEAGGREGATEDMETRICSAMPLE']._serialized_start=969\n_globals['_SIMPLEAGGREGATEDMETRICSAMPLE']._serialized_end=1115\n_globals['_LISTMICROGRIDCOMPONENTSDATAREQUEST']._serialized_start=1118\n_globals['_LISTMICROGRIDCOMPONENTSDATAREQUEST']._serialized_end=1685\n_globals['_LISTMICROGRIDCOMPONENTSDATAREQUEST_LISTFILTER']._serialized_start=1471\n_globals['_LISTMICROGRIDCOMPONENTSDATAREQUEST_LISTFILTER']._serialized_end=1685\n_globals['_LISTMICROGRIDCOMPONENTSDATARESPONSE']._serialized_start=1688\n_globals['_LISTMICROGRIDCOMPONENTSDATARESPONSE']._serialized_end=2018\n_globals['_LISTMICROGRIDCOMPONENTSDATARESPONSE_MICROGRIDDATA']._serialized_start=1901\n_globals['_LISTMICROGRIDCOMPONENTSDATARESPONSE_MICROGRIDDATA']._serialized_end=2018\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMREQUEST']._serialized_start=2021\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMREQUEST']._serialized_end=2470\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMREQUEST_STREAMFILTER']._serialized_start=2314\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMREQUEST_STREAMFILTER']._serialized_end=2470\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMRESPONSE']._serialized_start=2473\n_globals['_RECEIVEMICROGRIDCOMPONENTSDATASTREAMRESPONSE']._serialized_end=2621\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATAREQUEST']._serialized_start=2624\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATAREQUEST']._serialized_end=3096\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATAREQUEST_AGGREGATIONLISTFILTER']._serialized_start=2939\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATAREQUEST_AGGREGATIONLISTFILTER']._serialized_end=3096\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATARESPONSE']._serialized_start=3099\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATARESPONSE']._serialized_end=3499\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATARESPONSE_AGGREGATEDRESULT']._serialized_start=3333\n_globals['_LISTAGGREGATEDMICROGRIDCOMPONENTSDATARESPONSE_AGGREGATEDRESULT']._serialized_end=3499\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMREQUEST']._serialized_start=3502\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMREQUEST']._serialized_end=3855\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMREQUEST_AGGREGATIONSTREAMFILTER']._serialized_start=3756\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMREQUEST_AGGREGATIONSTREAMFILTER']._serialized_end=3855\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMRESPONSE']._serialized_start=3858\n_globals['_RECEIVEAGGREGATEDMICROGRIDCOMPONENTSDATASTREAMRESPONSE']._serialized_end=4061\n_globals['_REPORTING']._serialized_start=4064\n_globals['_REPORTING']._serialized_end=4837\n# @@protoc_insertion_point(module_scope)\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.TimeFilter-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.TimeFilter.end","title":"end  <code>property</code>","text":"<pre><code>end: Timestamp\n</code></pre> <p>Optional UTC end time for the query.</p> <p>Info</p> <p>If not provided, the query defaults to the most recent available data for the specified microgrid components.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2/#frequenz.api.reporting.v1.reporting_pb2.TimeFilter.start","title":"start  <code>property</code>","text":"<pre><code>start: Timestamp\n</code></pre> <p>Optional UTC start time for the query.</p> <p>Info</p> <p>If not provided, the query defaults to the earliest available data for the specified microgrid components.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/","title":"reporting_pb2_grpc","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc","title":"frequenz.api.reporting.v1.reporting_pb2_grpc","text":"<p>Client and server classes corresponding to protobuf-defined services.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.Reporting","title":"frequenz.api.reporting.v1.reporting_pb2_grpc.Reporting","text":"<p>             Bases: <code>object</code></p> <p>The Reporting service provides services for real-time and historical metrics monitoring of various microgrid components like Batteries, EV Chargers, and Inverters.</p> <p>Utilize these APIs for tasks ranging from real-time metric streaming to complex, formula-driven historical data aggregation. For detailed information on component categories and the metrics they provide, please consult the referenced component categories imported above.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>class Reporting(object):\n\"\"\"The Reporting service provides services for real-time and historical metrics monitoring\n    of various microgrid components like Batteries, EV Chargers, and Inverters.\n    Utilize these APIs for tasks ranging from real-time metric streaming to complex,\n    formula-driven historical data aggregation. For detailed information on component\n    categories and the metrics they provide, please consult the referenced component categories\n    imported above.\n    \"\"\"\n@staticmethod\ndef ListMicrogridComponentsData(request,\ntarget,\noptions=(),\nchannel_credentials=None,\ncall_credentials=None,\ninsecure=False,\ncompression=None,\nwait_for_ready=None,\ntimeout=None,\nmetadata=None):\nreturn grpc.experimental.unary_unary(request, target, '/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData',\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.SerializeToString,\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.FromString,\noptions, channel_credentials,\ninsecure, call_credentials, compression, wait_for_ready, timeout, metadata)\n@staticmethod\ndef ReceiveMicrogridComponentsDataStream(request,\ntarget,\noptions=(),\nchannel_credentials=None,\ncall_credentials=None,\ninsecure=False,\ncompression=None,\nwait_for_ready=None,\ntimeout=None,\nmetadata=None):\nreturn grpc.experimental.unary_stream(request, target, '/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream',\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.SerializeToString,\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.FromString,\noptions, channel_credentials,\ninsecure, call_credentials, compression, wait_for_ready, timeout, metadata)\n@staticmethod\ndef ListAggregatedMicrogridComponentsData(request,\ntarget,\noptions=(),\nchannel_credentials=None,\ncall_credentials=None,\ninsecure=False,\ncompression=None,\nwait_for_ready=None,\ntimeout=None,\nmetadata=None):\nreturn grpc.experimental.unary_unary(request, target, '/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData',\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.SerializeToString,\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.FromString,\noptions, channel_credentials,\ninsecure, call_credentials, compression, wait_for_ready, timeout, metadata)\n@staticmethod\ndef ReceiveAggregatedMicrogridComponentsDataStream(request,\ntarget,\noptions=(),\nchannel_credentials=None,\ncall_credentials=None,\ninsecure=False,\ncompression=None,\nwait_for_ready=None,\ntimeout=None,\nmetadata=None):\nreturn grpc.experimental.unary_stream(request, target, '/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream',\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.SerializeToString,\nfrequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.FromString,\noptions, channel_credentials,\ninsecure, call_credentials, compression, wait_for_ready, timeout, metadata)\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub","title":"frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub","text":"<p>The Reporting service provides services for real-time and historical metrics monitoring of various microgrid components like Batteries, EV Chargers, and Inverters.</p> <p>Utilize these APIs for tasks ranging from real-time metric streaming to complex, formula-driven historical data aggregation. For detailed information on component categories and the metrics they provide, please consult the referenced component categories imported above.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>        !!! note\nThis RPC endpoint retrieves aggregated historical metrics data based on user-defined\nformulas for microgrid components. At least one formula must be provided for a valid query.\nFormulas are provided on a per-microgrid basis.\n\"\"\"\n        context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n        context.set_details('Method not implemented!')\n        raise NotImplementedError('Method not implemented!')\n    def ReceiveAggregatedMicrogridComponentsDataStream(self, request, context):\n        \"\"\"Streams aggregated metrics based on user-defined formulas for a list of microgrid\ncomponents.\n!!! note\nThis RPC endpoint retrieves aggregated historical metrics data based on user-defined\nformulas for microgrid components. At least one formula for one microgrid must be provided\nfor a valid result.\n\"\"\"\n        context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n        context.set_details('Method not implemented!')\n        raise NotImplementedError('Method not implemented!')\ndef add_ReportingServicer_to_server(servicer, server):\n    rpc_method_handlers = {\n            'ListMicrogridComponentsData': grpc.unary_unary_rpc_method_handler(\n                    servicer.ListMicrogridComponentsData,\n                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.FromString,\n                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.SerializeToString,\n            ),\n            'ReceiveMicrogridComponentsDataStream': grpc.unary_stream_rpc_method_handler(\n                    servicer.ReceiveMicrogridComponentsDataStream,\n                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.FromString,\n                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.SerializeToString,\n            ),\n            'ListAggregatedMicrogridComponentsData': grpc.unary_unary_rpc_method_handler(\n                    servicer.ListAggregatedMicrogridComponentsData,\n                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.FromString,\n                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.SerializeToString,\n            ),\n            'ReceiveAggregatedMicrogridComponentsDataStream': grpc.unary_stream_rpc_method_handler(\n                    servicer.ReceiveAggregatedMicrogridComponentsDataStream,\n                    request_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.FromString,\n                    response_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.SerializeToString,\n            ),\n    }\n    generic_handler = grpc.method_handlers_generic_handler(\n            'frequenz.api.reporting.v1.Reporting', rpc_method_handlers)\n    server.add_generic_rpc_handlers((generic_handler,))\n # This class is part of an EXPERIMENTAL API.\nclass Reporting(object):\n    \"\"\"The Reporting service provides services for real-time and historical metrics monitoring\nof various microgrid components like Batteries, EV Chargers, and Inverters.\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub.ListAggregatedMicrogridComponentsData","title":"ListAggregatedMicrogridComponentsData  <code>instance-attribute</code>","text":"<pre><code>ListAggregatedMicrogridComponentsData: UnaryUnaryMultiCallable[\nListAggregatedMicrogridComponentsDataRequest,\nListAggregatedMicrogridComponentsDataResponse,\n]\n</code></pre> <p>Fetches aggregated historical metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula must be provided for a valid query. Formulas are provided on a per-microgrid basis.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub.ListMicrogridComponentsData","title":"ListMicrogridComponentsData  <code>instance-attribute</code>","text":"<pre><code>ListMicrogridComponentsData: UnaryUnaryMultiCallable[\nListMicrogridComponentsDataRequest,\nListMicrogridComponentsDataResponse,\n]\n</code></pre> <p>Fetches historical metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves historical metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub.ReceiveAggregatedMicrogridComponentsDataStream","title":"ReceiveAggregatedMicrogridComponentsDataStream  <code>instance-attribute</code>","text":"<pre><code>ReceiveAggregatedMicrogridComponentsDataStream: UnaryStreamMultiCallable[\nReceiveAggregatedMicrogridComponentsDataStreamRequest,\nReceiveAggregatedMicrogridComponentsDataStreamResponse,\n]\n</code></pre> <p>Streams aggregated metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula for one microgrid must be provided for a valid result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingAsyncStub.ReceiveMicrogridComponentsDataStream","title":"ReceiveMicrogridComponentsDataStream  <code>instance-attribute</code>","text":"<pre><code>ReceiveMicrogridComponentsDataStream: UnaryStreamMultiCallable[\nReceiveMicrogridComponentsDataStreamRequest,\nReceiveMicrogridComponentsDataStreamResponse,\n]\n</code></pre> <p>Streams metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint streams metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer","title":"frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer","text":"<p>             Bases: <code>object</code></p> <p>The Reporting service provides services for real-time and historical metrics monitoring of various microgrid components like Batteries, EV Chargers, and Inverters.</p> <p>Utilize these APIs for tasks ranging from real-time metric streaming to complex, formula-driven historical data aggregation. For detailed information on component categories and the metrics they provide, please consult the referenced component categories imported above.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>class ReportingServicer(object):\n\"\"\"The Reporting service provides services for real-time and historical metrics monitoring\n    of various microgrid components like Batteries, EV Chargers, and Inverters.\n    Utilize these APIs for tasks ranging from real-time metric streaming to complex,\n    formula-driven historical data aggregation. For detailed information on component\n    categories and the metrics they provide, please consult the referenced component categories\n    imported above.\n    \"\"\"\ndef ListMicrogridComponentsData(self, request, context):\n\"\"\"Fetches historical metrics for a list of microgrid components.\n        !!! note\n        This RPC endpoint retrieves historical metrics data for components of one or more\n        microgrids. Clients need to provide at least one microgrid ID and one component ID\n        to get a result.\n        \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\ndef ReceiveMicrogridComponentsDataStream(self, request, context):\n\"\"\"Streams metrics for a list of microgrid components.\n        !!! note\n        This RPC endpoint streams metrics data for components of one or more microgrids.\n        Clients need to provide at least one microgrid ID and one component ID\n        to get a result.\n        \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\ndef ListAggregatedMicrogridComponentsData(self, request, context):\n\"\"\"Fetches aggregated historical metrics based on user-defined formulas for a list of\n        microgrid components.\n        !!! note\n        This RPC endpoint retrieves aggregated historical metrics data based on user-defined\n        formulas for microgrid components. At least one formula must be provided for a valid query.\n        Formulas are provided on a per-microgrid basis.\n        \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\ndef ReceiveAggregatedMicrogridComponentsDataStream(self, request, context):\n\"\"\"Streams aggregated metrics based on user-defined formulas for a list of microgrid\n        components.\n        !!! note\n        This RPC endpoint retrieves aggregated historical metrics data based on user-defined\n        formulas for microgrid components. At least one formula for one microgrid must be provided\n        for a valid result.\n        \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer-functions","title":"Functions","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer.ListAggregatedMicrogridComponentsData","title":"ListAggregatedMicrogridComponentsData","text":"<pre><code>ListAggregatedMicrogridComponentsData(\nrequest: ListAggregatedMicrogridComponentsDataRequest,\ncontext: _ServicerContext,\n) -&gt; Union[\nListAggregatedMicrogridComponentsDataResponse,\nAwaitable[\nListAggregatedMicrogridComponentsDataResponse\n],\n]\n</code></pre> <p>Fetches aggregated historical metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula must be provided for a valid query. Formulas are provided on a per-microgrid basis.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>def ListAggregatedMicrogridComponentsData(self, request, context):\n\"\"\"Fetches aggregated historical metrics based on user-defined formulas for a list of\n    microgrid components.\n    !!! note\n    This RPC endpoint retrieves aggregated historical metrics data based on user-defined\n    formulas for microgrid components. At least one formula must be provided for a valid query.\n    Formulas are provided on a per-microgrid basis.\n    \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer.ListMicrogridComponentsData","title":"ListMicrogridComponentsData","text":"<pre><code>ListMicrogridComponentsData(\nrequest: ListMicrogridComponentsDataRequest,\ncontext: _ServicerContext,\n) -&gt; Union[\nListMicrogridComponentsDataResponse,\nAwaitable[ListMicrogridComponentsDataResponse],\n]\n</code></pre> <p>Fetches historical metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves historical metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>def ListMicrogridComponentsData(self, request, context):\n\"\"\"Fetches historical metrics for a list of microgrid components.\n    !!! note\n    This RPC endpoint retrieves historical metrics data for components of one or more\n    microgrids. Clients need to provide at least one microgrid ID and one component ID\n    to get a result.\n    \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer.ReceiveAggregatedMicrogridComponentsDataStream","title":"ReceiveAggregatedMicrogridComponentsDataStream","text":"<pre><code>ReceiveAggregatedMicrogridComponentsDataStream(\nrequest: ReceiveAggregatedMicrogridComponentsDataStreamRequest,\ncontext: _ServicerContext,\n) -&gt; Union[\nIterator[\nReceiveAggregatedMicrogridComponentsDataStreamResponse\n],\nAsyncIterator[\nReceiveAggregatedMicrogridComponentsDataStreamResponse\n],\n]\n</code></pre> <p>Streams aggregated metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula for one microgrid must be provided for a valid result.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>def ReceiveAggregatedMicrogridComponentsDataStream(self, request, context):\n\"\"\"Streams aggregated metrics based on user-defined formulas for a list of microgrid\n    components.\n    !!! note\n    This RPC endpoint retrieves aggregated historical metrics data based on user-defined\n    formulas for microgrid components. At least one formula for one microgrid must be provided\n    for a valid result.\n    \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingServicer.ReceiveMicrogridComponentsDataStream","title":"ReceiveMicrogridComponentsDataStream","text":"<pre><code>ReceiveMicrogridComponentsDataStream(\nrequest: ReceiveMicrogridComponentsDataStreamRequest,\ncontext: _ServicerContext,\n) -&gt; Union[\nIterator[ReceiveMicrogridComponentsDataStreamResponse],\nAsyncIterator[\nReceiveMicrogridComponentsDataStreamResponse\n],\n]\n</code></pre> <p>Streams metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint streams metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>def ReceiveMicrogridComponentsDataStream(self, request, context):\n\"\"\"Streams metrics for a list of microgrid components.\n    !!! note\n    This RPC endpoint streams metrics data for components of one or more microgrids.\n    Clients need to provide at least one microgrid ID and one component ID\n    to get a result.\n    \"\"\"\ncontext.set_code(grpc.StatusCode.UNIMPLEMENTED)\ncontext.set_details('Method not implemented!')\nraise NotImplementedError('Method not implemented!')\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub","title":"frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub","text":"<p>             Bases: <code>object</code></p> <p>The Reporting service provides services for real-time and historical metrics monitoring of various microgrid components like Batteries, EV Chargers, and Inverters.</p> <p>Utilize these APIs for tasks ranging from real-time metric streaming to complex, formula-driven historical data aggregation. For detailed information on component categories and the metrics they provide, please consult the referenced component categories imported above.</p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>class ReportingStub(object):\n\"\"\"The Reporting service provides services for real-time and historical metrics monitoring\n    of various microgrid components like Batteries, EV Chargers, and Inverters.\n    Utilize these APIs for tasks ranging from real-time metric streaming to complex,\n    formula-driven historical data aggregation. For detailed information on component\n    categories and the metrics they provide, please consult the referenced component categories\n    imported above.\n    \"\"\"\ndef __init__(self, channel):\n\"\"\"Constructor.\n        Args:\n            channel: A grpc.Channel.\n        \"\"\"\nself.ListMicrogridComponentsData = channel.unary_unary(\n'/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.FromString,\n)\nself.ReceiveMicrogridComponentsDataStream = channel.unary_stream(\n'/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.FromString,\n)\nself.ListAggregatedMicrogridComponentsData = channel.unary_unary(\n'/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.FromString,\n)\nself.ReceiveAggregatedMicrogridComponentsDataStream = channel.unary_stream(\n'/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.FromString,\n)\n</code></pre>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub.ListAggregatedMicrogridComponentsData","title":"ListAggregatedMicrogridComponentsData  <code>instance-attribute</code>","text":"<pre><code>ListAggregatedMicrogridComponentsData: UnaryUnaryMultiCallable[\nListAggregatedMicrogridComponentsDataRequest,\nListAggregatedMicrogridComponentsDataResponse,\n] = unary_unary(\n\"/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData\",\nrequest_serializer=SerializeToString,\nresponse_deserializer=FromString,\n)\n</code></pre> <p>Fetches aggregated historical metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula must be provided for a valid query. Formulas are provided on a per-microgrid basis.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub.ListMicrogridComponentsData","title":"ListMicrogridComponentsData  <code>instance-attribute</code>","text":"<pre><code>ListMicrogridComponentsData: UnaryUnaryMultiCallable[\nListMicrogridComponentsDataRequest,\nListMicrogridComponentsDataResponse,\n] = unary_unary(\n\"/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData\",\nrequest_serializer=SerializeToString,\nresponse_deserializer=FromString,\n)\n</code></pre> <p>Fetches historical metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves historical metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub.ReceiveAggregatedMicrogridComponentsDataStream","title":"ReceiveAggregatedMicrogridComponentsDataStream  <code>instance-attribute</code>","text":"<pre><code>ReceiveAggregatedMicrogridComponentsDataStream: UnaryStreamMultiCallable[\nReceiveAggregatedMicrogridComponentsDataStreamRequest,\nReceiveAggregatedMicrogridComponentsDataStreamResponse,\n] = unary_stream(\n\"/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream\",\nrequest_serializer=SerializeToString,\nresponse_deserializer=FromString,\n)\n</code></pre> <p>Streams aggregated metrics based on user-defined formulas for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint retrieves aggregated historical metrics data based on user-defined formulas for microgrid components. At least one formula for one microgrid must be provided for a valid result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub.ReceiveMicrogridComponentsDataStream","title":"ReceiveMicrogridComponentsDataStream  <code>instance-attribute</code>","text":"<pre><code>ReceiveMicrogridComponentsDataStream: UnaryStreamMultiCallable[\nReceiveMicrogridComponentsDataStreamRequest,\nReceiveMicrogridComponentsDataStreamResponse,\n] = unary_stream(\n\"/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream\",\nrequest_serializer=SerializeToString,\nresponse_deserializer=FromString,\n)\n</code></pre> <p>Streams metrics for a list of microgrid components.</p> <p>Note</p> <p>This RPC endpoint streams metrics data for components of one or more microgrids. Clients need to provide at least one microgrid ID and one component ID to get a result.</p>"},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub-functions","title":"Functions","text":""},{"location":"python-reference/frequenz/api/reporting/v1/reporting_pb2_grpc/#frequenz.api.reporting.v1.reporting_pb2_grpc.ReportingStub.__init__","title":"__init__","text":"<pre><code>__init__(channel: Union[Channel, Channel]) -&gt; None\n</code></pre> <p>Constructor.</p> PARAMETER  DESCRIPTION <code>channel</code> <p>A grpc.Channel.</p> <p> TYPE: <code>Union[Channel, Channel]</code> </p> Source code in <code>frequenz/api/reporting/v1/reporting_pb2_grpc.py</code> <pre><code>def __init__(self, channel):\n\"\"\"Constructor.\n    Args:\n        channel: A grpc.Channel.\n    \"\"\"\nself.ListMicrogridComponentsData = channel.unary_unary(\n'/frequenz.api.reporting.v1.Reporting/ListMicrogridComponentsData',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListMicrogridComponentsDataResponse.FromString,\n)\nself.ReceiveMicrogridComponentsDataStream = channel.unary_stream(\n'/frequenz.api.reporting.v1.Reporting/ReceiveMicrogridComponentsDataStream',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveMicrogridComponentsDataStreamResponse.FromString,\n)\nself.ListAggregatedMicrogridComponentsData = channel.unary_unary(\n'/frequenz.api.reporting.v1.Reporting/ListAggregatedMicrogridComponentsData',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ListAggregatedMicrogridComponentsDataResponse.FromString,\n)\nself.ReceiveAggregatedMicrogridComponentsDataStream = channel.unary_stream(\n'/frequenz.api.reporting.v1.Reporting/ReceiveAggregatedMicrogridComponentsDataStream',\nrequest_serializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest.SerializeToString,\nresponse_deserializer=frequenz_dot_api_dot_reporting_dot_v1_dot_reporting__pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse.FromString,\n)\n</code></pre>"}]}